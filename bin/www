#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('bk:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}



const roomOne = require('../models/roomOne');
const roomTwo = require('../models/roomTwo');
const config = require('../config');
const express = require('express');
const socket = require('socket.io');
var mongoose = require('mongoose');

mongoose.connect(config.db, {
  useNewUrlParser: true
});

var db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function () {
  console.log("We're connected!");
});





let io = socket(server);

io.on('connection', (socket) => {

  console.log('Made socket connection');

  socket.on('Pokój-1', data => {

    let {
      message
    } = data;

    const newsData = new roomOne({
      message
    });
    const errors = newsData.validateSync();

    newsData.save();


    io.sockets.emit('chat', data);

  })

  socket.on('Pokój-2', data => {

    let {
      message
    } = data;

    const newsData = new roomTwo({
      message
    });
    const errors = newsData.validateSync();

    newsData.save();


    io.sockets.emit('chat', data);

  })
  //Emit all mess to clients
  socket.on('one', data => {


    roomOne.find({}, (err, messages) => {

      io.sockets.emit('all-chat', messages);

    });
    
    

  })
  socket.on('two', data => {

    roomTwo.find({}, (err, messages) => {

      io.sockets.emit('all-chat', messages);

    });

  })

});